[{"E:\\alex-pc\\JS-PROJECTS\\calculator\\src\\App.tsx":"1","E:\\alex-pc\\JS-PROJECTS\\calculator\\src\\Button.tsx":"2","E:\\alex-pc\\JS-PROJECTS\\calculator\\src\\index.tsx":"3","E:\\alex-pc\\JS-PROJECTS\\calculator\\src\\reportWebVitals.ts":"4"},{"size":6547,"mtime":1610666850047,"results":"5","hashOfConfig":"6"},{"size":332,"mtime":1609941004129,"results":"7","hashOfConfig":"6"},{"size":500,"mtime":1607721328067,"results":"8","hashOfConfig":"6"},{"size":425,"mtime":1607721328067,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"7hdwbn",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"E:\\alex-pc\\JS-PROJECTS\\calculator\\src\\App.tsx",["21","22","23"],"import React, { ChangeEvent, useState } from 'react';\nimport './App.css';\nimport { Button } from \"./Button\";\n\nconst allButtons = [\n    'MC', 'M+', 'M-', 'MR',\n    'C', '+/-', '/', '*',\n    '7', '8', '9', '-',\n    '4', '5', '6', '+',\n    '1', '2', '3', '=',\n    '<', '0', '.']\n\nconst App = () => {\n\n    const [inputValue, setInputValue] = useState<string | number>('')\n    const [history, setHistory] = useState<string | number>('')\n    const [action, setAction] = useState<string | number>('')\n    const [memmoryValue, setMemmoryValue] = useState<string | null>('')\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        let value: any = e.target.value.replace(/[^\\d.]*/g, '')\n        if (value.match(/\\./g)?.length > 1) {\n            value = value.substr(0, value.lastIndexOf(\".\"))\n        } else if (value.match(/\\-/g)?.length > 1) {\n            value = value.substr(0, value.lastIndexOf(\"-\"))\n        } else if (value.match(/\\+/g)?.length > 1) {\n            value = value.substr(0, value.lastIndexOf(\"+\"))\n        } else if (value.match(/\\*/g)?.length > 1) {\n            value = value.substr(0, value.lastIndexOf(\"*\"))\n        } else if (value.match(/\\/\\//g)?.length > 1) {\n            value = value.substr(0, value.lastIndexOf(\"/\"))\n        }\n        setInputValue(value)\n    }\n\n    const resultHandler = () => {\n        if (inputValue === \"0\") {\n            setHistory('')\n            setAction('')\n            setInputValue('Error')\n        } else if (inputValue && history && action) {\n            setHistory('')\n            setAction('')\n            setInputValue(eval(history + `${action}` + inputValue))\n        }\n    }\n\n    const checkHandler = () => {\n        if (inputValue !== '') {\n            setHistory(inputValue)\n            setInputValue('')\n        }\n        if (inputValue === '') {\n            setHistory(history)\n        }\n        if (history !== '' && inputValue !== '') {\n            setInputValue('')\n            setHistory(eval(history + `${action}` + inputValue))\n        }\n        if (inputValue === '' && history === '') {\n            setAction('')\n        }\n    }\n\n\n    const onKeyPressCharCodeHandler = (action: string) => {\n        setInputValue('')\n        setAction(action)\n        setHistory(inputValue)\n        checkHandler()\n    }\n\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 42) {\n            onKeyPressCharCodeHandler('*')\n        } else if (e.charCode === 43) {\n            onKeyPressCharCodeHandler('+')\n        } else if (e.charCode === 45) {\n            onKeyPressCharCodeHandler('-')\n        } else if (e.charCode === 47) {\n            onKeyPressCharCodeHandler('/')\n        } else if (e.charCode === 13) {\n            resultHandler()\n        }\n    }\n\n    const onClick = (value: string) => {\n        switch (value) {\n            case '=':\n                setInputValue(history)\n                setHistory('')\n                setAction('')\n                resultHandler()\n                break\n            case '+':\n                checkHandler()\n                setAction(value)\n                break\n            case '-':\n                checkHandler()\n                setAction(value)\n                break\n            case '*':\n                checkHandler()\n                setAction(value)\n                break\n            case '/':\n                setAction(value)\n                checkHandler()\n                break\n            case 'C':\n                setInputValue('')\n                setHistory('')\n                setAction('')\n                break\n            case '+/-':\n                if (inputValue) {\n                    setInputValue(-inputValue)\n                }\n                break\n            case '1':\n                setInputValue(inputValue + value)\n                break\n            case '2':\n                setInputValue(inputValue + value)\n                break\n            case '3':\n                setInputValue(inputValue + value)\n                break\n            case '4':\n                setInputValue(inputValue + value)\n                break\n            case '5':\n                setInputValue(inputValue + value)\n                break\n            case '6':\n                setInputValue(inputValue + value)\n                break\n            case '7':\n                setInputValue(inputValue + value)\n                break\n            case '8':\n                setInputValue(inputValue + value)\n                break\n            case '9':\n                setInputValue(inputValue + value)\n                break\n            case '0':\n                setInputValue(inputValue + value)\n                break\n            case '.':\n                if (inputValue.toString().includes(value)) {\n                    value = ''\n                }\n                setInputValue(inputValue + value)\n                break\n            case '<':\n                setInputValue(inputValue.toString().slice(0, -1))\n                break\n            case 'M+':\n                setInputValue(Number(inputValue) + Number(memmoryValue))\n                break\n            case 'M-':\n                setInputValue(Number(inputValue) - Number(memmoryValue))\n                break\n            case 'MR':\n                localStorage.setItem('MR', JSON.stringify(inputValue))\n                let getStorageValue: any = localStorage.getItem('MR')\n                setMemmoryValue(JSON.parse(getStorageValue))\n                break\n            case 'MC':\n                localStorage.removeItem('MR')\n                setMemmoryValue('')\n                break\n        }\n    }\n    return (\n        <div className=\"App\">\n            <h1>Calculator</h1>\n            <div className=\"calc\">\n                <div>\n                    <div className='result'>\n                        <input className={'input-history'} value={history} readOnly type='text' />\n                        <input className={'input-action'} value={action} readOnly type='text' />\n                        <input className={'input-result'}\n                            type=\"text\"\n                            autoFocus\n                            onKeyPress={onKeyPressHandler}\n                            value={inputValue} onChange={onChangeInput} />\n                    </div>\n                    <div className='buttons-table'>\n                        {allButtons.map(b => <Button key={b} value={b} onClick={onClick} />)}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n",["24","25"],"E:\\alex-pc\\JS-PROJECTS\\calculator\\src\\Button.tsx",[],["26","27"],"E:\\alex-pc\\JS-PROJECTS\\calculator\\src\\index.tsx",[],"E:\\alex-pc\\JS-PROJECTS\\calculator\\src\\reportWebVitals.ts",[],{"ruleId":"28","severity":1,"message":"29","line":24,"column":33,"nodeType":"30","messageId":"31","endLine":24,"endColumn":34,"suggestions":"32"},{"ruleId":"33","severity":1,"message":"34","line":44,"column":27,"nodeType":"35","messageId":"36","endLine":44,"endColumn":31},{"ruleId":"33","severity":1,"message":"34","line":58,"column":24,"nodeType":"35","messageId":"36","endLine":58,"endColumn":28},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"37","replacedBy":"41"},{"ruleId":"39","replacedBy":"42"},"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["43","44"],"no-eval","eval can be harmful.","CallExpression","unexpected","no-native-reassign",["45"],"no-negated-in-lhs",["46"],["45"],["46"],{"messageId":"47","fix":"48","desc":"49"},{"messageId":"50","fix":"51","desc":"52"},"no-global-assign","no-unsafe-negation","removeEscape",{"range":"53","text":"54"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"55","text":"56"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[835,836],"",[835,835],"\\"]